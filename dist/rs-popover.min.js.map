{"version":3,"sources":["module.js","rsPopover.js","attachment.js","rsPopoverForm.js","focus.js","form.js","popoverController.js","popoverState.js","registry.js","rsPopoverTrigger.js","tether.js"],"names":[],"mappings":"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","file":"rs-popover.min.js","sourcesContent":["angular.module('rs.popover', []).run(function () {\n  'use strict';\n\n  var styleContent, styleTag;\n\n  styleContent = document.createTextNode('.rs-popover-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0 } \\\n    .rs-popover-loading, .rs-popover-error { width: 200px; height: 140px } \\\n    .rs-popover-error { color: #c40022 } \\\n    .rs-popover-message { width: 100%; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; } \\\n    .rs-popover-body { margin: 0; padding: 20px }');\n  styleTag = document.createElement('style');\n  styleTag.type = 'text/css';\n  styleTag.appendChild(styleContent);\n\n  document.head.appendChild(styleTag);\n});\n","angular.module('rs.popover').directive('rsPopover', function () {\n  'use strict';\n\n  return {\n    scope: {\n      id: '@',\n      attach: '@',\n      onOpen: '='\n    },\n    restrict: 'EA',\n    controller: 'PopoverController',\n    transclude: true,\n    templateUrl: 'rsPopover.html',\n    compile: function (element, attributes) {\n      attributes.attach = attributes.attach || 'top-left';\n    }\n  };\n});\n","angular.module('rs.popover').factory('Attachment', function () {\n  'use strict';\n\n  var ARROW_SIZE = 11;\n  var ARROW_OFFSET = -33;\n\n  function Attachment(element, target, attachmentPoint) {\n    this.element = element;\n    this.target = target;\n    this.attachmentPoint = attachmentPoint;\n  }\n\n  Attachment.prototype.position = function () {\n    var position, popoverElement;\n\n    position = this.target.offset();\n\n    if (this.attachmentPoint === Attachment.TOP_LEFT) {\n      position.top += this.target.outerHeight() + ARROW_SIZE;\n      position.left += this.target.outerWidth() / 2 + ARROW_OFFSET;\n    } else {\n      position.top += this.target.outerHeight() / 2 + ARROW_OFFSET;\n      position.left += this.target.outerWidth() + ARROW_SIZE;\n    }\n\n    popoverElement = $('.rs-popover', this.element).first();\n    popoverElement.css({ top: position.top, left: position.left });\n  };\n\n  Attachment.LEFT_TOP = 'left-top';\n  Attachment.TOP_LEFT = 'top-left';\n\n  return Attachment;\n});\n","angular.module('rs.popover').directive('rsPopoverForm', function () {\n  'use strict';\n\n  return {\n    scope: {\n      id: '@',\n      attach: '@',\n      saveLabel: '@',\n      cancelLabel: '@',\n      onOpen: '=',\n      onSave: '='\n    },\n    restrict: 'EA',\n    controller: 'PopoverController',\n    transclude: true,\n    templateUrl: 'rsPopoverForm.html',\n    compile: function (element, attributes) {\n      attributes.attach = attributes.attach || 'top-left';\n    }\n  };\n});\n","angular.module('rs.popover').factory('focus', function ($timeout) {\n  'use strict';\n\n  return function focus(element, invokeApply) {\n    return $timeout(function () {\n      var focusableElement;\n\n      focusableElement = element.find(':input').first();\n      focusableElement.focus();\n    }, 0, invokeApply || false);\n  };\n});\n","angular.module('rs.popover').factory('form', function () {\n  'use strict';\n\n  function reset(element, form) {\n    form.$setPristine();\n  }\n\n  function validate(element) {\n    element = angular.element(element);\n    element.find(':input').each(function (i, element) {\n      var controller;\n\n      element = angular.element(element);\n      controller = element.controller('ngModel');\n\n      if (!controller) {\n        return;\n      }\n\n      /*\n      HACK: We need a way to force validation on fields that haven't been\n      interacted with, so we change the view value from `undefined` to an empty\n      string using $setViewValue. However, this only works the first time\n      validation is forced, so we need to alternate between setting `undefined`\n      and an empty string.\n      */\n      if (controller.$viewValue === undefined) {\n        controller.$setViewValue('');\n      } else if (controller.$viewValue === '') {\n        controller.$setViewValue(undefined);\n      }\n    });\n  }\n\n  return {\n    reset: reset,\n    validate: validate\n  };\n});\n","angular.module('rs.popover').controller('PopoverController', function ($scope, $element, registry, form, tether, focus, PopoverState) {\n  'use strict';\n\n  function resetState() {\n    var state;\n\n    state = new PopoverState();\n    state.on('open', $scope.onOpen || angular.noop);\n    state.on('save', $scope.onSave || angular.noop);\n    state.on('close', resetState);\n    state.on('close', function () {\n      form.reset($element, $scope.form);\n    });\n    state.on('load', function () {\n      focus($element);\n    });\n\n    $scope.state = state;\n  }\n\n  this.id = $scope.id;\n  registry.register($scope.id, $scope);\n  resetState();\n\n  $scope.styles = {\n    'rs-popover-arrow': true,\n    'rs-popover-arrow-top-left': $scope.attach === 'top-left',\n    'rs-popover-arrow-left-top': $scope.attach === 'left-top'\n  };\n\n  $scope.$on('$destroy', function () {\n    registry.deregister($scope.id);\n  });\n\n  $scope.is = function (state) {\n    return $scope.state.is(state);\n  };\n\n  $scope.open = function (target) {\n    $scope.state.open();\n    tether.attach($element, target, $scope.attach);\n  };\n\n  $scope.close = function () {\n    $scope.state.close();\n  };\n\n  $scope.toggle = function (target) {\n    if ($scope.state.is('closed')) {\n      $scope.open(target);\n    } else {\n      $scope.close();\n    }\n  };\n\n  $scope.save = function () {\n    form.validate($element, $scope.form);\n\n    if ($scope.form.$valid) {\n      $scope.state.save();\n    }\n  };\n});\n\n","angular.module('rs.popover').factory('PopoverState', function ($q) {\n  'use strict';\n\n  function PopoverState() {\n    this.state = PopoverState.CLOSED;\n    this.subscriptions = { open: [], load: [], error: [], save: [], close: [] };\n  }\n\n  PopoverState.prototype.is = function (state) {\n    return this.state === state;\n  };\n\n  PopoverState.prototype.on = function (e, handler) {\n    this.subscriptions[e].push(handler);\n  };\n\n  PopoverState.prototype.fire = function (e) {\n    var promises = [];\n\n    angular.forEach(this.subscriptions[e], function (handler) {\n      promises.push(handler());\n    });\n\n    return $q.all(promises);\n  };\n\n  PopoverState.prototype.open = function () {\n    this.message = 'Loading…';\n    this.state = PopoverState.LOADING;\n    this.fire('open')\n      .then(angular.bind(this, this.load))\n      .catch(angular.bind(this, this.error));\n  };\n\n  PopoverState.prototype.load = function () {\n    this.state = PopoverState.OPEN;\n    this.fire('load');\n  };\n\n  PopoverState.prototype.error = function (message) {\n    this.message = message;\n    this.state = PopoverState.ERROR;\n    this.fire('error');\n  };\n\n  PopoverState.prototype.save = function () {\n    this.state = PopoverState.SAVING;\n    this.fire('save')\n      .then(angular.bind(this, this.close))\n      .catch(angular.bind(this, this.load));\n  };\n\n  PopoverState.prototype.close = function () {\n    this.state = PopoverState.CLOSED;\n    this.fire('close');\n  };\n\n  PopoverState.CLOSED = 'closed';\n  PopoverState.LOADING = 'loading';\n  PopoverState.OPEN = 'open';\n  PopoverState.ERROR = 'error';\n  PopoverState.SAVING = 'saving';\n\n  return PopoverState;\n});\n","angular.module('rs.popover').factory('registry', function () {\n  'use strict';\n\n  function Registry() {\n    this.popovers = {};\n  }\n\n  Registry.prototype.register = function (id, scope) {\n    if (!id) {\n      throw 'Popover ID must not be empty!';\n    } else if (id in this.popovers) {\n      throw 'Popover ID \"' + id + '\" has already been registered!';\n    }\n\n    this.popovers[id] = scope;\n  };\n\n  Registry.prototype.deregister = function (id) {\n    if (id in this.popovers) {\n      delete this.popovers[id];\n    } else {\n      throw 'Popover ID \"' + id + '\" has not been registered!';\n    }\n  };\n\n  Registry.prototype.popover = function (id) {\n    if (id in this.popovers) {\n      return this.popovers[id];\n    }\n\n    throw 'Popover ID \"' + id + '\" has not been registered!';\n  };\n\n  return new Registry();\n});\n","angular.module('rs.popover').directive('rsPopoverTrigger', function (registry) {\n  'use strict';\n\n  return {\n    restrict: 'A',\n    require: '?^rsPopover',\n    link: function (scope, element, attrs, popoverController) {\n      var id;\n\n      if (attrs.rsPopoverTrigger) {\n        id = attrs.rsPopoverTrigger;\n      } else if (popoverController) {\n        id = popoverController.id;\n      } else {\n        throw 'No popover ID was specified for popover trigger!';\n      }\n\n      element.on('click', function (e) {\n        e.preventDefault();\n\n        registry.popover(id).toggle(element);\n        scope.$apply();\n      });\n    }\n  };\n});\n\n","angular.module('rs.popover').factory('tether', function ($window, Attachment) {\n  'use strict';\n\n  function Tether() {\n    this.attachments = [];\n\n    angular.element($window).on('resize scroll', angular.bind(this, this.reposition));\n  }\n\n  Tether.prototype.attach = function (element, target, attachmentPoint) {\n    var attachment;\n\n    attachment = new Attachment(element, target, attachmentPoint);\n    attachment.position();\n\n    this.attachments.push(attachment);\n\n    return attachment;\n  };\n\n  Tether.prototype.reposition = function () {\n    angular.forEach(this.attachments, function (attachment) {\n      attachment.position();\n    });\n  };\n\n  Tether.prototype.detach = function (element) {\n    var index;\n\n    angular.forEach(this.attachments, function (attachment, i) {\n      if (attachment.element === element) {\n        index = i;\n      }\n    });\n\n    this.attachments.splice(index, 1);\n  };\n\n  return new Tether();\n});\n"],"sourceRoot":"/source/"}